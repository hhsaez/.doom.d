#+title: Config
#+author: H. Hernan Saez

* Table of Contents :toc:
- [[#introduction][Introduction]]
- [[#user-setup][User Setup]]
- [[#editor][Editor]]
- [[#frame-setup][Frame Setup]]
  - [[#initial-frame-size][Initial frame size]]
  - [[#initial-frame-position][Initial Frame Position]]
- [[#fonts][Fonts]]
- [[#theme][Theme]]
- [[#dashboard][Dashboard]]
- [[#misc][Misc]]
- [[#development][Development]]

* Introduction
Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!


* User Setup
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets. It is optional.

#+BEGIN_SRC emacs-lisp
;; (setq user-full-name "John Doe"
;;       user-mail-address "john@doe.com")
#+END_SRC

* Editor

Disable empty line markers

#+BEGIN_SRC emacs-lisp
(setq-default indicate-empty-lines nil)

(after! vi-tilde-fringe
  (global-vi-tilde-fringe-mode -1))
(remove-hook 'prog-mode-hook #'vi-tilde-fringe-mode)
#+END_SRC

* Frame Setup
** Initial frame size
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(height . 70))
(add-to-list 'default-frame-alist '(width . 240))
#+END_SRC

** Initial Frame Position
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(user-position . t))
(add-to-list 'default-frame-alist '(top . 0.5))
(add-to-list 'default-frame-alist '(left . 0.5))
#+END_SRC

* Fonts
Doom exposes five (optional) variables for controlling fonts in Doom:

- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
   presentations or streaming.
- `doom-symbol-font' -- for symbols
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they accept. For example:

#+BEGIN_SRC emacs-lisp
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
(setq doom-font (font-spec :family "JetBrains Mono" :size 16))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!
#+END_SRC

* Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-one)
#+END_SRC

* Dashboard

#+BEGIN_SRC emacs-lisp
(setq +doom-dashboard-banner-file (concat doom-user-dir "wallpaper.png"))
#+END_SRC

* Misc
#+BEGIN_SRC emacs-lisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+END_SRC

* Development

The following allos code blocks within .org files to be formatted when using /C-c '/

#+BEGIN_SRC emacs-lisp

;; Good Org src defaults (indent inside blocks with c++-mode rules)
(after! org
  (setq org-src-tab-acts-natively t
        org-src-preserve-indentation nil
        org-edit-src-content-indentation 0))

;; Make org-src C++ edit buffers format like .cpp, without clang-format
(after! org-src
  (defun my/org-src-cpp-lsp-format-setup ()
    (when (and (bound-and-true-p org-src-mode)
               (derived-mode-p 'c++-mode))
      ;; give buffer a plausible filename/dir so clangd attaches (you already did this)
      (unless buffer-file-name
        (setq-local buffer-file-name
                    (expand-file-name "org-src-edit.cpp" default-directory)))

      ;; ensure LSP is running
      (when (fboundp 'lsp-deferred) (lsp-deferred))

      ;; 1) Format on save (optional)
      (add-hook 'before-save-hook #'lsp-format-buffer nil t)

      ;; 2) Use TAB to format (instead of cc-mode indent) in the edit buffer
      (local-set-key (kbd "TAB") #'lsp-format-buffer)

      ;; If you still want cc-mode indent on Shift+TAB:
      (local-set-key (kbd "<backtab>") #'indent-for-tab-command)

      ;; If you want to try on-type formatting anyway:
      ;; (setq-local lsp-enable-on-type-formatting t)
      ;; Note: may be limited or interfered by electric-indent-mode.
      ))
  (add-hook 'org-src-mode-hook #'my/org-src-cpp-lsp-format-setup))
#+END_SRC
